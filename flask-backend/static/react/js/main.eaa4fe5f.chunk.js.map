{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","Square","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","squareStyle","margin","width","props","sqWidth","float","backgroundColor","bgColor","height","sqHeight","react_default","a","createElement","style","React","Component","MondrianOne","className","window","r1_1","p_w1_1","b","c1_1","c","p_w2_1","d","r2_1","p_w3_1","e","r3_1","f","c2_1","MondrianTwo","r1_2","p_w1_2","r2_2","r3_2","p_w2_2","r4_2","p_w3_2","r5_2","name","target","href","type","onClick","location","reload","Boolean","Math","round","random","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"js/main.eaa4fe5f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport $ from 'jquery';\nimport './App.css';\n\nfunction App() {\n\n  class Square extends React.Component {\n    render() {\n      var squareStyle = {\n        margin: 5,\n        width: this.props.sqWidth,\n        float: \"left\",\n        backgroundColor: this.props.bgColor,\n        height: this.props.sqHeight\n      };\n      return (\n        <div style={squareStyle}>\n        </div>\n      );\n    }\n  }\n\n  function MondrianOne(props) {\n    return(\n      <div className=\"container-one painting\">\n        <div className=\"columnStyle\">\n          <Square bgColor={window.a} sqHeight={window.r1_1} sqWidth={window.p_w1_1} />\n          <Square bgColor={window.b} sqHeight={window.c1_1} sqWidth={window.p_w1_1} />\n        </div>\n        <div className=\"columnStyle\">\n          <Square bgColor={window.c} sqHeight=\"220px\" sqWidth={window.p_w2_1} />\n        </div>\n        <div className=\"columnStyle\">\n          <Square bgColor={window.d} sqHeight={window.r2_1} sqWidth={window.p_w3_1} />\n          <Square bgColor={window.e} sqHeight={window.r3_1} sqWidth={window.p_w3_1} />\n          <Square bgColor={window.f} sqHeight={window.c2_1} sqWidth={window.p_w3_1} />\n        </div>\n      </div>\n    );\n  }\n\n  function MondrianTwo(props) {\n    return(\n      <div className=\"container-two painting\">\n        <div className=\"columnStyle\">\n          <Square bgColor={window.d} sqHeight={window.r1_2} sqWidth={window.p_w1_2} />\n          <Square bgColor={window.e} sqHeight={window.r2_2} sqWidth={window.p_w1_2} />\n          <Square bgColor={window.f} sqHeight={window.r3_2} sqWidth={window.p_w1_2} />\n        </div>\n        <div className=\"columnStyle\">\n          <Square bgColor={window.c} sqHeight=\"330px\" sqWidth={window.p_w2_2} />\n        </div>\n        <div className=\"columnStyle\">\n          <Square bgColor={window.a} sqHeight={window.r4_2} sqWidth={window.p_w3_2} />\n          <Square bgColor={window.b} sqHeight={window.r5_2} sqWidth={window.p_w3_2} />\n        </div>\n      </div>\n    );\n  }\n\n  function Mondrian(props) {\n    const rand = Boolean(Math.round(Math.random()));\n\n    if (rand) {\n      return <MondrianOne />;\n    }\n    return <MondrianTwo />;\n  }\n\n  function refreshPage(){\n    window.location.reload();\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p className=\"righteous\">{window.name}</p>\n        <p className=\"author\">w/ ðŸ’• by @AGOVC, about <a target=\"_blank\" href=\"https://github.com/agovc/mondrian\">the PROJECT</a></p>\n\n        <button className=\"button\" type=\"button\" onClick={ refreshPage }>\n        <Mondrian />\n        </button>\n\n      </header>\n\n\n\n    </div>\n\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}